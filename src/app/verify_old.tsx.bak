import React, { useCallback, useEffect, useMemo, useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ImageBackground,
  TouchableOpacity,
  Image,
  Dimensions,
  Platform,
  KeyboardAvoidingView,
  ScrollView,
  ActivityIndicator,
} from 'react-native';
import { Stack, useRouter } from 'expo-router';
import { Toast } from 'react-native-toast-notifications';
import { supabase } from '../lib/supabase';

const { width, height } = Dimensions.get('window');
const isSmallDevice = width < 375;
const isMediumDevice = width >= 375 && width < 414;

const COLORS = {
  primary: '#000',
  error: '#d32f2f',
  text: '#000',
  textSecondary: '#666',
  background: 'rgba(255, 255, 255, 0.9)',
  border: 'rgba(0, 0, 0, 0.1)',
};

const SPACING = {
  small: 8,
  medium: 16,
  large: 24,
  xlarge: 32,
};

export default function Verify() {
  const router = useRouter();
  const [isResending, setIsResending] = useState(false);
  const [userEmail, setUserEmail] = useState<string | null>(null);
  const [verificationStatus, setVerificationStatus] = useState('pending'); // 'pending', 'verified', 'error'
  
  // Check if the user is verified on component mount and periodically
  useEffect(() => {
    const checkVerificationStatus = async () => {
      try {
        // Get the current user and session
        const { data: { user } } = await supabase.auth.getUser();
        const { data: { session } } = await supabase.auth.getSession();
        
        if (user) {
          setUserEmail(user.email || null);
          
          // Check if email is confirmed by examining email_confirmed_at 
          // or user's confirmed_at property and if the session is active
          if (user.email_confirmed_at || (user.confirmed_at && session)) {
            setVerificationStatus('verified');
            Toast.show('Email verified successfully!', {
              type: 'success',
              placement: 'top',
              duration: 2000,
            });
            // Redirect to home after successful verification
            setTimeout(() => {
              router.push('/');
            }, 2000);
          }
        }
      } catch (error) {
        console.error('Error checking verification status:', error);
      }
    };
    
    // Check immediately and then every 5 seconds
    checkVerificationStatus();
    const interval = setInterval(checkVerificationStatus, 5000);
    
    // Clean up interval on component unmount
    return () => clearInterval(interval);
  }, [router]);

  const handleResendEmail = useCallback(async () => {
    setIsResending(true);
    try {
      // Get the user's email from the current session
      const { data: { user } } = await supabase.auth.getUser();
      
      if (!user?.email) {
        throw new Error('No user email found. Please go back to sign up.');
      }
      
      const { error } = await supabase.auth.resend({
        type: 'signup',
        email: user.email,
      });

      if (error) throw error;

      Toast.show('Verification email resent successfully! Please check your inbox.', {
        type: 'success',
        placement: 'top',
        duration: 3000,
      });
    } catch (error: any) {
      console.error('Error resending email:', error);
      
      // Provide more helpful messages based on common error types
      let errorMessage = 'Failed to resend verification email';
      
      if (error.message.includes('rate limit')) {
        errorMessage = 'Too many attempts. Please wait a few minutes before trying again.';
      } else if (error.message.includes('not found') || error.message.includes('No user')) {
        errorMessage = 'Email not found. Please try signing up again.';
      }
      
      Toast.show(errorMessage, {
        type: 'error',
        placement: 'top',
        duration: 4000,
      });
    } finally {
      setIsResending(false);
    }
  }, []);

  const handleBackToSignup = useCallback(() => {
    router.push('/signup');
  }, [router]);
  const [code, setCode] = useState(['', '', '', '', '', '']);
  const [isLoading, setIsLoading] = useState(false);

  const handleCodeChange = useCallback((text: string, index: number) => {
    const newCode = [...code];
    newCode[index] = text;
    setCode(newCode);

    // Auto-focus next input
    if (text && index < 5) {
      const nextInput = document.querySelector(`input[name=code-${index + 1}]`);
      if (nextInput) {
        (nextInput as HTMLInputElement).focus();
      }
    }
  }, [code]);

  const handleVerify = useCallback(async () => {
    const verificationCode = code.join('');
    if (verificationCode.length !== 6) {
      Toast.show('Please enter the complete verification code', {
        type: 'error',
        placement: 'top',
        duration: 3000,
      });
      return;
    }

    setIsLoading(true);
    try {
      const { error } = await supabase.auth.verifyOtp({
        token_hash: verificationCode,
        type: 'email',
      });
      
      if (error) throw error;

      Toast.show('Email verified successfully', {
        type: 'success',
        placement: 'top',
        duration: 1500,
      });
      
      router.push('/');
    } catch (error: any) {
      Toast.show(error.message || 'Verification failed', {
        type: 'error',
        placement: 'top',
        duration: 3000,
      });
    } finally {
      setIsLoading(false);
    }
  }, [code, router]);

  const handleResendCode = useCallback(async () => {
    setIsResending(true);
    try {
      // Get the user's email from the current session or state
      const { data: { user } } = await supabase.auth.getUser();
      
      const { error } = await supabase.auth.resend({
        type: 'signup',
        email: user?.email || '',
      });

      if (error) throw error;

      Toast.show('Verification code resent successfully', {
        type: 'success',
        placement: 'top',
        duration: 1500,
      });
    } catch (error: any) {
      Toast.show(error.message || 'Failed to resend code', {
        type: 'error',
        placement: 'top',
        duration: 3000,
      });
    } finally {
      setIsResending(false);
    }
  }, []);

  const handleBackToSignup = useCallback(() => {
    router.push('/signup');
  }, [router]);

  const logoStyle = useMemo(() => [
    styles.logo,
    isSmallDevice && styles.logoSmall,
    isMediumDevice && styles.logoMedium
  ], [isSmallDevice, isMediumDevice]);

  return (
    <KeyboardAvoidingView 
      behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
      style={styles.container}
    >
      <ImageBackground
        source={{
          uri: 'https://img.freepik.com/fotos-premium/abstracto-foto-lineas-suaves-pantone-fondo-color-gradiente_558873-59527.jpg',
        }}
        style={styles.backgroundImage}
      >
        <Stack.Screen options={{ headerShown: false }} />
        <ScrollView 
          contentContainerStyle={styles.scrollContent}
          keyboardShouldPersistTaps="handled"
          showsVerticalScrollIndicator={false}
        >
          <Image 
            source={require('../../assets/images/gotg-logo.png')}
            style={logoStyle}
            resizeMode="contain"
            accessible={true}
            accessibilityLabel="Girls on the Go logo"
          />
          
          <View style={styles.content}>
            <Text style={styles.title}>Verification Code</Text>
            <Text style={styles.description}>
              We've sent a 6-digit verification code to your email address. Please enter it below to verify your account.
            </Text>

            <View style={styles.codeContainer}>
              {code.map((digit, index) => (
                <View key={index} style={styles.codeInputContainer}>
                  <TextInput
                    style={styles.codeInput}
                    value={digit}
                    onChangeText={(text) => handleCodeChange(text, index)}
                    maxLength={1}
                    keyboardType="number-pad"
                    selectTextOnFocus
                    accessible={true}
                    accessibilityLabel={`Verification code digit ${index + 1}`}
                  />
                </View>
              ))}
            </View>

            <View style={styles.resendContainer}>
              <Text style={styles.resendText}>Didn't receive the code?</Text>
              <TouchableOpacity 
                onPress={handleResendCode}
                disabled={isResending}
                accessible={true}
                accessibilityLabel="Resend verification code"
                accessibilityRole="button"
                accessibilityState={{ disabled: isResending }}
              >
                {isResending ? (
                  <ActivityIndicator size="small" color={COLORS.primary} />
                ) : (
                  <Text style={styles.resendButton}>Resend Code</Text>
                )}
              </TouchableOpacity>
            </View>

            <TouchableOpacity
              style={[styles.verifyButton, isLoading && styles.verifyButtonDisabled]}
              onPress={handleVerify}
              disabled={isLoading}
              accessible={true}
              accessibilityLabel="Verify code"
              accessibilityRole="button"
              accessibilityState={{ disabled: isLoading }}
            >
              {isLoading ? (
                <ActivityIndicator color="#fff" />
              ) : (
                <Text style={styles.verifyButtonText}>Verify</Text>
              )}
            </TouchableOpacity>

            <View style={styles.footer}>
              <Text style={styles.footerText}>Need to change your email?</Text>
              <TouchableOpacity 
                onPress={handleBackToSignup}
                accessible={true}
                accessibilityLabel="Go back to sign up"
                accessibilityRole="link"
              >
                <Text style={styles.footerLink}>Go back to Sign-Up</Text>
              </TouchableOpacity>
            </View>
          </View>
        </ScrollView>
      </ImageBackground>
    </KeyboardAvoidingView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  backgroundImage: {
    flex: 1,
    resizeMode: 'cover',
  },
  scrollContent: {
    flexGrow: 1,
    alignItems: 'center',
    padding: SPACING.medium,
  },
  logo: {
    width: width * 0.9,
    height: height * 0.3,
    marginBottom: 40,
    marginTop: -50,
  },
  logoSmall: {
    width: width * 0.8,
    height: height * 0.25,
    marginTop: -70,
    marginBottom: 30,
  },
  logoMedium: {
    width: width * 0.85,
    height: height * 0.27,
    marginTop: -5,
    marginBottom: 35,
  },
  content: {
    width: '100%',
    maxWidth: 400,
    alignItems: 'center',
  },
  title: {
    fontSize: Platform.select({
      ios: 32,
      android: 30,
      default: 32,
    }),
    fontWeight: 'bold',
    color: COLORS.text,
    marginBottom: SPACING.medium,
    textAlign: 'center',
    textShadowColor: 'rgba(255, 255, 255, 0.5)',
    textShadowOffset: { width: 1, height: 1 },
    textShadowRadius: 3,
  },
  description: {
    fontSize: Platform.select({
      ios: 16,
      android: 14,
      default: 16,
    }),
    color: COLORS.text,
    marginBottom: SPACING.xlarge,
    textAlign: 'center',
    lineHeight: 22,
    paddingHorizontal: SPACING.medium,
  },
  codeContainer: {
    flexDirection: 'row',
    justifyContent: 'center',
    gap: SPACING.small,
    marginBottom: SPACING.xlarge,
  },
  codeInputContainer: {
    width: 45,
    height: 55,
    backgroundColor: COLORS.background,
    borderRadius: 12,
    borderWidth: 1,
    borderColor: COLORS.border,
    shadowColor: COLORS.text,
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.1,
    shadowRadius: 3,
    elevation: 3,
  },
  codeInput: {
    flex: 1,
    textAlign: 'center',
    fontSize: 24,
    fontWeight: 'bold',
    color: COLORS.text,
  },
  resendContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: SPACING.xlarge,
    gap: SPACING.small,
  },
  resendText: {
    color: COLORS.text,
    fontSize: 14,
  },
  resendButton: {
    color: COLORS.text,
    fontSize: 14,
    fontWeight: 'bold',
    textDecorationLine: 'underline',
  },
  verifyButton: {
    backgroundColor: COLORS.primary,
    padding: SPACING.medium,
    borderRadius: 12,
    width: '100%',
    alignItems: 'center',
    marginBottom: SPACING.xlarge,
    shadowColor: COLORS.text,
    shadowOffset: {
      width: 0,
      height: 4,
    },
    shadowOpacity: 0.2,
    shadowRadius: 5,
    elevation: 5,
  },
  verifyButtonDisabled: {
    opacity: 0.7,
  },
  verifyButtonText: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#fff',
  },
  footer: {
    alignItems: 'center',
  },
  footerText: {
    color: COLORS.textSecondary,
    fontSize: 14,
    marginBottom: SPACING.small,
  },
  footerLink: {
    color: COLORS.text,
    fontSize: 14,
    fontWeight: 'bold',
    textDecorationLine: 'underline',
  },
});